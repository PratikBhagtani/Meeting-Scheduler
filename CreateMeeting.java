/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MeetingSoft;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.TimePicker;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author MNAZARE
 */
public class CreateMeeting extends javax.swing.JFrame {

    List<String> listSlots = new ArrayList<>();
    LocalDate meetingDate = null;
    Integer roomId = null;

    int LoginUserId;

    /**
     * Creates new form CreateMeeting
     */
    public CreateMeeting(int LoginUserID) {
        initComponents();
        initDateTimePicker();
        jComboBox1.removeAllItems();
        this.LoginUserId = LoginUserID;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        label1 = new java.awt.Label();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        button3 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label1.setText("Select Meeting Date and time");

        button1.setLabel("Get available rooms");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setLabel("Schedule Meeting");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button3.setLabel("Get employees");
        button3.setName(""); // NOI18N
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 141, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed

        //update meetingdata table
        updateMeetingdataTable();
        updateAvailabilityTable();

    }//GEN-LAST:event_button2ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        Connection con;
        Statement stmt;
        ResultSet rs;
        String sqlRoom = "SELECT * from roomdata";
        Integer empcount = getEmployeecountForMeeting();
        System.out.println("empCount: " + empcount);

        if (empcount > 1) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
                stmt = con.createStatement();
                rs = stmt.executeQuery(sqlRoom);

                while (rs.next()) {
                    String s = rs.getString(2) + ": capacity-" + rs.getString(3) + ":" + rs.getString(4);
                    Integer capacity = Integer.parseInt(rs.getString(3));
                    if (empcount <= capacity && isAvailableinTimeslotList(rs.getInt(1))) {
                        jComboBox1.addItem(s);
                    }
                }

            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(CreateMeeting.this, "Attention :  Please select valid number of employees", "Create Meeting", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_button1ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed

        if (datePicker1.getDate() != null && timePicker1.getTime() != null && timePicker3.getTime() != null) {

            populateDateforMeeting();
            populateSlots(timePicker1.getTime(), timePicker3.getTime());
            initEmployeeAvailabilityTable();

        } else {
            JOptionPane.showMessageDialog(CreateMeeting.this, "Attention :  Please select valid Date & time for meeting", "Create Meeting", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_button3ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CreateMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CreateMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CreateMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CreateMeeting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CreateMeeting().setVisible(true);
//
//            }
//        });
//    }
    private void initDateTimePicker() {

        setTitle("Create Meeting");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //setLayout(new FlowLayout());
        setSize(new Dimension(640, 480));
        setLocationRelativeTo(null);
        jPanel1.setVisible(true);
        // Create a date picker, and add it to the form.
        datePicker1 = new DatePicker();
        datePicker1.setDateToToday();
        jPanel1.add(datePicker1);

        // Create a time picker, and add it to the form.
        timePicker1 = new TimePicker();
        //timePicker1.setTimeToNow();
        jPanel1.add(timePicker1);

        // Create a time picker, and add it to the form.
        timePicker3 = new TimePicker();

        jPanel1.add(timePicker3);

        /**
         * The code below shows: 1) How to create a DateTimePicker (with default
         * settings), 2) How to create a DatePicker with some custom settings,
         * and 3) How to create a TimePicker with some custom settings. To keep
         * the Basic Demo interface simpler, the lines for adding these
         * components to the form have been commented out.
         */
        // Create a DateTimePicker. (But don't add it to the form).
        //DateTimePicker dateTimePicker1 = new DateTimePicker();
        // To display this picker, uncomment this line.
        // add(dateTimePicker1);
        // Create a date picker with some custom settings.
        //DatePickerSettings dateSettings = new DatePickerSettings();
        //dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);
        //DatePicker datePicker2 = new DatePicker(dateSettings);
        // To display this picker, uncomment this line.
        // add(datePicker2);
        // Create a time picker with some custom settings.
        //TimePickerSettings timeSettings = new TimePickerSettings();
        //timeSettings.setColor(TimeArea.TimePickerTextValidTime, Color.blue);
        //timeSettings.initialTime = LocalTime.now();
        //TimePicker timePicker2 = new TimePicker(timeSettings);
        // To display this picker, uncomment this line.
        // add(timePicker2);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // create object of table and table model
    }
    private DatePicker datePicker1;
    private TimePicker timePicker1;
    private TimePicker timePicker3;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
    private int col;
    private int rowz;

    private void initEmployeeAvailabilityTable() {

        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        String header[] = new String[]{"select", "EmpId", "9am-9.30am", "9.30am-10am",
        "10am-10.30am","10.30am-11am","11am-11.30am","11.30am-12pm",
        "12.00pm-12.30pm","12.30pm-13.00pm","13.00pm-13.30pm","13.30pm-14.00pm","13.30pm-14.00pm","14.30pm-15.00pm"};
        dtm.setColumnIdentifiers(header);

        getEmployeeData(dtm);
        jTable1.setModel(dtm);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent e) {
                String s = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
                if (s.equals("*")) {
                    jTable1.setValueAt("", jTable1.getSelectedRow(), 0);
                } else {
                    jTable1.setValueAt("*", jTable1.getSelectedRow(), 0);
                }
            }
        });
    }

    private void getEmployeeData(DefaultTableModel dtm) {
        Connection con;
        Statement stmt;
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlEmployee = "Select * from empdata";

        String sqlMeeting = "Select * from availability where ID = ? and day=?";
        List<Integer> list1 = new ArrayList<>();

        try {
            System.out.println(dtm.getRowCount());
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
            stmt = con.createStatement();
            rs = stmt.executeQuery(sqlEmployee);
            while (rs.next()) {
                list1.add(rs.getInt(1));
            }
            System.out.println("List of employee: "+list1);
            // query the meetingData table with all the list of employees
            pstmt = con.prepareStatement(sqlMeeting);

            for (Integer employeeId : list1) {
                pstmt.setInt(1, employeeId);
                pstmt.setDate(2, Date.valueOf(datePicker1.getDate()));

                System.out.println(pstmt.toString());
                rs = pstmt.executeQuery();

                // if no records of booking are returned
                if (!rs.next()) {
                    dtm.addRow(getEmployeeAsAvailable(employeeId));
                    System.out.println("callin getEmployeeAsAvailable"+employeeId);
                } else {

                    getEmployeeAvailabilityRecordAsPerslots(dtm, employeeId,rs.getString(3));
                    System.out.println("callin getEmployeeAvailabilityRecordAsPerslots"+employeeId);
                }

                while (rs.next()) {
                    Time startTime = rs.getTime(1);
                    Time endTime = rs.getTime(2);
                    // dtm.addRow(getRowForappointmenttable());
                    //System.out.println(rs.getInt(4));
                    String s = getIsInGivenSlot(startTime, endTime);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }

    private Object[] getEmployeeAsAvailable(Integer employeeId) {

        return new Object[]{"", employeeId.toString(), "--", "--","--","--","--","--","--","--","--","--","--","--"};

    }

    private String getIsInGivenSlot(Time startTime, Time endTime) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Integer getEmployeecountForMeeting() {
        Integer empcount = 0;
        TableModel tm = jTable1.getModel();
        for (int i = 0; i < tm.getRowCount(); i++) {
            Object selected = tm.getValueAt(i, 0);
            if ("*".equals(selected.toString())) {
                empcount++;
            }
        }
        return empcount;
    }

    private void populateSlots(LocalTime sTime, LocalTime eTime) {

        Connection con;
        Statement stmt;
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlTimeSlot = "Select * from timeslottable where startTime >= ? and endTime <=?";
        System.out.println("Timestlots method " + Time.valueOf(sTime) + "--" + Time.valueOf(eTime));

        Object a[] = null;

        listSlots.clear();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
            stmt = con.createStatement();
            pstmt = con.prepareStatement(sqlTimeSlot);
            pstmt.setTime(1, Time.valueOf(sTime));
            pstmt.setTime(2, Time.valueOf(eTime));
            System.out.println(pstmt.toString());
            rs = pstmt.executeQuery();

            while (rs.next()) {
                listSlots.add(rs.getString(1));

            }
            System.out.println("Timestlots selected: " + listSlots);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean presentInbookedslotList(int aInt, String slot) {

        Connection con;

        Statement stmt;
        ResultSet rs;
        String sqlAvailability = "Select * from availability where ID=" + aInt + " and day=" + Date.valueOf(meetingDate);

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
            stmt = con.createStatement();

            rs = stmt.executeQuery(sqlAvailability);
              System.out.println("MeetingSoft.CreateMeeting.presentInbookedslotList()");
            while (rs.next()) {
                 System.out.println("MeetingSoft.CreateMeeting.presentInbookedslotList(): inrs");
                String bookedslots = rs.getString(3);

                System.out.println("MeetingSoft.CreateMeeting.presentInbookedslotList(): inrs" +bookedslots);
                String s[] = bookedslots.split("\\s*,\\s*");
                for (int i = 0; i < s.length; i++) {
                    if (slot.equals(s[i])) {
                        System.out.println("MeetingSoft.CreateMeeting.presentInbookedslotList(): true");
                        return true;
                    }

                }

            }

            con.close();
            stmt.close();
            rs.close();
            System.out.println("Timestlots selected: " + listSlots);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    private void populateDateforMeeting() {
        meetingDate = datePicker1.getDate();
    }

    private void getEmployeeAvailabilityRecordAsPerslots(DefaultTableModel dtm, Integer employeeId, String bookedslot) {

        //new Object[]{"", employeeId.toString(), "--", "--"};
        String a[] = new String[12];

        for (int i = 0; i < 12; i++) {
            Integer k =i+1;
            String s ="s"+k.toString();

            System.out.println("MeetingSoft.CreateMeeting.getEmployeeAvailabilityRecordAsPerslots()  " + s);
            if (presentInbookedSlotEmp( bookedslot,s)) {
                a[i] = "blocked";
            } else {
                a[i] = "--";
            }
        }
        dtm.addRow(new Object[]{"", employeeId.toString(), a[0], a[1]});

    }

    private boolean isAvailableinTimeslotList(int aInt) {
        for (String s : listSlots) {
            if (presentInbookedslotList(aInt, s)) {
                return false;
            }
        }
        return true;
    }

    private void updateMeetingdataTable() {

        LocalDate meetDate = meetingDate;
        LocalTime meetstartTime = timePicker1.getTime();
        LocalTime meetEndTime = timePicker3.getTime();

        List<Integer> empList = getEmpList();
        Connection con;
        Statement stmt;
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlMeeting = "SELECT LAST_INSERT_ID()";// "Select * from empdata";
        String sqlMeeting1 = "SELECT Max(MID) from mettingdata";




        String query = "insert into mettingdata (MID, startTime, endtime, owner,atendeeID,accepted,meetingDate,room)"
                + " values (?,?, ?, ?,?,?,?,?)";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
            stmt = con.createStatement();
            pstmt = con.prepareStatement(query);

            rs = stmt.executeQuery(sqlMeeting);
            Integer meetingid = null;
            if(rs.next()){
                meetingid = rs.getInt(1)+1;
            }
            else
            {
                meetingid=8000;
            }

            for (int empid : empList) {
                pstmt.setInt(1, meetingid);
                pstmt.setTime(2, Time.valueOf(meetstartTime));
                pstmt.setTime(3, Time.valueOf(meetEndTime));
                pstmt.setInt(4, LoginUserId);
                pstmt.setInt(5, empid);
                pstmt.setBoolean(6, false);
                pstmt.setDate(7, Date.valueOf(meetingDate));
                pstmt.setInt(8,roomId);
                pstmt.executeUpdate();
//                rs = stmt.executeQuery(sqlMeeting);
//                Integer meetingID = null;
//                while (rs.next()) {
//                    meetingID = rs.getInt(1);
//                    //JOptionPane.showMessageDialog(CreateMeeting.this, "Attention : Meeting "+meetingID+" created successfully","Create Employee" , JOptionPane.INFORMATION_MESSAGE);
//                }
            }

            this.dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }

    }

    private List<Integer> getEmpList() {
        List<Integer> l1 = new ArrayList<>();
        TableModel tm = jTable1.getModel();
        for (int i = 0; i < tm.getRowCount(); i++) {
            Object selected = tm.getValueAt(i, 0);
            if ("*".equals(selected.toString())) {
                l1.add(Integer.parseInt(tm.getValueAt(i, 1).toString()));
            }
        }
        return l1;
    }

    private void updateAvailabilityTable() {
        List<Integer> empList = getEmpList();
        Connection con;
        Statement stmt;
        PreparedStatement pstmt;
        ResultSet rs;

        String query = "insert into availability ( ID, day, bookedslots)"
                + " values (?, ?, ?)";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/meetingsoftdb?zeroDateTimeBehavior=convertToNull", "root", "root");
            stmt = con.createStatement();
            pstmt = con.prepareStatement(query);

            for (int empid : empList) {
                pstmt.setInt(1, empid);
                pstmt.setDate(2, Date.valueOf(meetingDate));
                pstmt.setString(3, getSlotsAsString());
                pstmt.executeUpdate();
            }

            this.dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }

    }

    private String getSlotsAsString() {
        StringBuilder sb = new StringBuilder();
        for (String s : listSlots) {
            sb.append(",").append(s);
        }
        String result = sb.substring(",".length());
        return result;
    }

    private boolean presentInbookedSlotEmp(String bookedslots,String slot1) {
       System.out.println("presentInbookedSlotEmp listslots values:"+listSlots.toString());

            String s[] = bookedslots.split("\\s*,\\s*");

            System.out.println("presentInbookedSlotEmp  bookedslots : " + s[0]);
            for (int i = 0; i < s.length; i++) {
                if (slot1.equals(s[i])) {
                    return true;
                }

            }

        return false;
    }

}
